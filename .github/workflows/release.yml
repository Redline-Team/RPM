name: Build Bleeding Edge

on: 
  workflow_dispatch:
  push:
    branches: main
    paths: package.json

env:
  packageName: "dev.redline-team.rpm"
  packagePath: "Packages/dev.redline-team.rpm"
  packageFileName: "Redline"
  packageReleaseName: "Bleeding Edge"
  modulesPath: "Redline/Scripts/Editor/Modules"

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    
      - name: Checkout
        uses: actions/checkout@v3
    
      - name: Get Version
        id: version
        uses: zoexx/github-action-json-file-properties@b9f36ce6ee6fe2680cd3c32b2c62e22eade7e590
        with: 
            file_path: "./package.json"
            prop_path: "version"
      
      - name: Generate Tag
        id: tag
        run: echo prop="${{ steps.version.outputs.value }}BE" >> $GITHUB_OUTPUT

      - name: Check If Release Tag Exists
        id: checkReleaseTag
        uses: mukunku/tag-exists-action@v1.2.0
        with:
          tag: ${{ steps.tag.outputs.prop }}
    
      - name: Set Environment Variables
        if: ${{ steps.checkReleaseTag.outputs.exists == 'false' }}
        run: |
          echo "zipFile=${{ env.packageFileName }}_v${{ steps.version.outputs.value }}_VPM".zip >> $GITHUB_ENV
          echo "unityPackage=${{ env.packageFileName }}_v${{ steps.version.outputs.value }}.unitypackage" >> $GITHUB_ENV
    
      - name: Set ZIP Url
        uses: jossef/action-set-json-field@v2.1
        with:
          file: ./package.json
          field: url
          value: 'https://github.com/${{ github.repository }}/releases/download/${{ steps.tag.outputs.prop }}/${{ env.zipFile }}'
          
      - name: Set UnityPackage Url
        uses: jossef/action-set-json-field@v2.1
        with:
          file: ./package.json
          field: unityPackage
          value: 'https://github.com/${{ github.repository }}/releases/download/${{ steps.tag.outputs.prop }}/${{ env.unityPackage }}'
          
      - name: Create directory and move files
        if: ${{ steps.checkReleaseTag.outputs.exists == 'false' }}
        run: |
          mkdir -p ${{env.packagePath}}
          rsync -r --exclude="${{ env.packagePath }}" --exclude="${{ env.modulesPath }}" ./ "${{ env.packagePath }}"/
        
      - name: Create Zip
        if: ${{ steps.checkReleaseTag.outputs.exists == 'false' }}
        uses: thedoctor0/zip-release@09336613be18a8208dfa66bd57efafd9e2685657
        with:
          type: "zip"
          directory: "${{env.packagePath}}/"
          filename: "../../${{env.zipFile}}" # make the zip file two directories up, since we start two directories in above
          exclusions: "*.git* *.github* .gitignore Packages/"
          
      - name: Create Main Package Meta List
        if: ${{ steps.checkReleaseTag.outputs.exists == 'false' }}
        run: |
          find "${{env.packagePath}}" -name \*.meta >> metaList
          
      - name: Create Main UnityPackage
        if: ${{ steps.checkReleaseTag.outputs.exists == 'false' }}
        uses: pCYSl5EDgo/create-unitypackage@cfcd3cf0391a5ef1306342794866a9897c32af0b
        with:
          package-path: ${{ env.unityPackage }}
          include-files: metaList
          
      - name: Add Icon to Main UnityPackage
        if: ${{ steps.checkReleaseTag.outputs.exists == 'false' }}
        uses: foxscore/add-icon-to-unitypackage@v1
        with:
          package_path: ${{ env.unityPackage }}
          icon_path: '.github/thumbnail.png'
          package_not_found_behavior: 'warn'
          icon_not_found_behavior: 'warn'
          icon_already_present_behavior: 'warn'
          
      # Detect and create module packages
      - name: Detect Modules
        if: ${{ steps.checkReleaseTag.outputs.exists == 'false' }}
        id: detect_modules
        run: |
          # Get list of module folders
          MODULE_DIRS=$(find "${{ env.modulesPath }}" -maxdepth 1 -mindepth 1 -type d -not -path "*/\.*" -exec basename {} \;)
          echo "Found modules: $MODULE_DIRS"
          echo "modules=$MODULE_DIRS" >> $GITHUB_OUTPUT
          
          # Create module meta lists
          for MODULE in $MODULE_DIRS; do
            echo "Creating meta list for $MODULE"
            find "${{ env.modulesPath }}/${MODULE}" -name \*.meta > "${MODULE}_metaList"
          done
          
          # Create a list of module package filenames for the release
          MODULE_PACKAGES=""
          for MODULE in $MODULE_DIRS; do
            MODULE_PACKAGE="Redline-Module-${MODULE}.unitypackage"
            MODULE_PACKAGES="${MODULE_PACKAGES}${MODULE_PACKAGE}\n"
          done
          echo -e "$MODULE_PACKAGES" > module_packages.txt
      
      # RHierarchy Module Package
      - name: Create RHierarchy Module Package
        if: ${{ steps.checkReleaseTag.outputs.exists == 'false' && contains(steps.detect_modules.outputs.modules, 'RHierarchy') }}
        uses: pCYSl5EDgo/create-unitypackage@cfcd3cf0391a5ef1306342794866a9897c32af0b
        with:
          package-path: Redline-Module-RHierarchy.unitypackage
          include-files: RHierarchy_metaList
          
      - name: Add Icon to RHierarchy Module Package
        if: ${{ steps.checkReleaseTag.outputs.exists == 'false' && contains(steps.detect_modules.outputs.modules, 'RHierarchy') }}
        uses: foxscore/add-icon-to-unitypackage@v1
        with:
          package_path: Redline-Module-RHierarchy.unitypackage
          icon_path: '.github/thumbnail.png'
          package_not_found_behavior: 'warn'
          icon_not_found_behavior: 'warn'
          icon_already_present_behavior: 'warn'

      # Themer Module Package
      - name: Create Themer Module Package
        if: ${{ steps.checkReleaseTag.outputs.exists == 'false' && contains(steps.detect_modules.outputs.modules, 'Themer') }}
        uses: pCYSl5EDgo/create-unitypackage@cfcd3cf0391a5ef1306342794866a9897c32af0b
        with:
          package-path: Redline-Module-Themer.unitypackage
          include-files: Themer_metaList
          
      - name: Add Icon to Themer Module Package
        if: ${{ steps.checkReleaseTag.outputs.exists == 'false' && contains(steps.detect_modules.outputs.modules, 'Themer') }}
        uses: foxscore/add-icon-to-unitypackage@v1
        with:
          package_path: Redline-Module-Themer.unitypackage
          icon_path: '.github/thumbnail.png'
          package_not_found_behavior: 'warn'
          icon_not_found_behavior: 'warn'
          icon_already_present_behavior: 'warn'
      
      # Add more modules as needed with similar steps
      # For example:
      # - name: Create AnotherModule Module Package
      #   if: ${{ steps.checkReleaseTag.outputs.exists == 'false' && contains(steps.detect_modules.outputs.modules, 'AnotherModule') }}
      #   uses: pCYSl5EDgo/create-unitypackage@cfcd3cf0391a5ef1306342794866a9897c32af0b
      #   with:
      #     package-path: Redline-Module-AnotherModule.unitypackage
      #     include-files: AnotherModule_metaList
        
      - name: Make Release
        if: ${{ steps.checkReleaseTag.outputs.exists == 'false' }}
        uses: softprops/action-gh-release@de2c0eb89ae2a093876385947365aca7b0e5f844
        with:
          name: "${{ env.packageReleaseName }} v${{ steps.version.outputs.value }}"
          tag_name: "${{ steps.tag.outputs.prop }}"
          files: |
            ${{ env.zipFile }}
            ${{ env.unityPackage }}
            Redline-Module-*.unitypackage
